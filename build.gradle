plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.epages.restdocs-api-spec" version '0.19.0'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
}

sonar {
    properties {
        property "sonar.projectKey", "kimyubi_OurHour"
        property "sonar.organization", "ourhour"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}


group = 'com.ourhours'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // docker compose
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // postgresql
    runtimeOnly 'org.postgresql:postgresql'

    // SwaggerUI + Spring Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // testcontainers
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.testcontainers:junit-jupiter"
}

openapi3 {
    title = 'OurHour REST API'
    description = 'OurHour 서비스의 API 문서입니다.'
    version = '0.1.0'
    servers = [{ url = 'http://localhost:8080' }]
    format = 'yaml'
    contact = {
        name = 'Kimyubi'
        email = 'ieieie0419@gmail.com'
    }
}

swaggerSources {
    sample {
        setInputFile(layout.buildDirectory.file("/api-spec/openapi3.yaml").get().asFile)
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}


generateSwaggerUI {
    dependsOn 'openapi3'
    delete file('src/main/resources/static/docs/')
    copy {
        from "build/resources/main/static/docs"
        into "src/main/resources/static/docs/"
    }
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'
    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

    from("${generateSwaggerUISampleTask.outputDir}")
    into("../build/resources/main/static/docs")
}

bootJar {
    dependsOn 'copySwaggerUI'
}
